'''
Tested on 244741eb6783b9d36d5725ee572f7448669e83d5f37d7bd5191546bede9ec432
'''
import re
import os
import sys
import json
import ctypes
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

class Settings(ctypes.Structure):
    _pack_ = 1  # This sets the equivalent of #pragma pack(1) in C
    
    _fields_ = [
        ("botapi", ctypes.c_char * 128),
        ("key", ctypes.c_char * 16),  # Assuming CryptoPP::AES::DEFAULT_KEYLENGTH is 16
        ("chatid", ctypes.c_char * 128),
        ("drop", ctypes.c_char * 128),
        ("drop_run", ctypes.c_bool),
        ("scheduler_name", ctypes.c_char * 50),
        ("scheduler_state", ctypes.c_bool),
        ("autorun", ctypes.c_char * 128),
        ("autorun_state", ctypes.c_bool),
        ("client_delay", ctypes.c_char * 10),
        ("auto_delete", ctypes.c_bool),
        ("protector", ctypes.c_bool),
        ("protectorName", ctypes.c_char * 50)
    ]
    def __iter__(self):
        for field in self._fields_:
            field_name = field[0]
            field_value = getattr(self, field_name)
            
            if isinstance(field_value, bytes):
                field_value = field_value.decode('utf-8')
            
            yield field_name, field_value


def decrypt_telegram_bottoken(setting: Settings):
    cipher = AES.new(setting.key, AES.MODE_ECB)
    plaintext = unpad(cipher.decrypt(setting.botapi), AES.block_size)
    pattern = rb'\d{10}:[\w\-]{35}\x00'
    if re.match(pattern, plaintext):
        setting.botapi = plaintext

    settings_dict = dict(setting)
    settings_json = json.dumps(settings_dict, indent=4)
    print(settings_json)



def B4B3RatParser(file_path):
    try:
        with open(file_path, "rb") as f:
            file_size = os.stat(file_path).st_size
            struct_size = ctypes.sizeof(Settings)
            f.seek(file_size - struct_size)
            data = f.read(struct_size)
            # print(data)
            buffer = ctypes.create_string_buffer(data, len(data))
            settings = Settings.from_buffer(buffer)
            
            decrypt_telegram_bottoken(settings)


    except Exception as e:
        print(e)
        pass

def main():
    path = sys.argv[1]
    if os.path.isfile(path):
        B4B3RatParser(path)



def usage():
    print("[+] Please provide file as argument")

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        usage()
    else:
        main()